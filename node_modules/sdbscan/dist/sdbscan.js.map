{"version":3,"sources":["sdbscan.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","sdbscan","window","eudist","v1","v2","sqrt","len","sum","d","Math","mandist","abs","dist","Distance","Point","v","idx","k","visited","DBScan","data","eps","min","_multi","_data","initData","_eps","_min","ret","multi","push","p","np","region","id","j","newRegion","regionQuery","rlen","kid","ks","noise","expandCluster","forEach","map","clusters","dbscan"],"mappings":"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","file":"sdbscan.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar sdbscan = require(\"./main.js\");\n\t$.sdbscan = sdbscan;\n})(window);\n\n},{\"./main.js\":3}],2:[function(require,module,exports){\nmodule.exports = {\n\t/**\n\t * Euclidean distance\n\t */\n\teudist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\tmandist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t\t}\n\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\t/**\n\t * Unidimensional distance\n\t */\n\tdist(v1,v2,sqrt) {\n\t\tvar d = Math.abs(v1-v2);\n\t\treturn sqrt? d : d*d;\n\t}\n\n}\n\n},{}],3:[function(require,module,exports){\nconst\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist;\n\n/*\nDBSCAN(D, epsilon, min_points):\n      C = 0\n      for each unvisited point P in dataset\n            mark P as visited\n            sphere_points = regionQuery(P, epsilon)\n            if sizeof(sphere_points) < min_points\n                  ignore P\n            else\n                  C = next cluster\n                  expandCluster(P, sphere_points, C, epsilon, min_points)\n\nexpandCluster(P, sphere_points, C, epsilon, min_points):\n      add P to cluster C\n      for each point P’ in sphere_points\n            if P’ is not visited\n                  mark P’ as visited\n                  sphere_points’ = regionQuery(P’, epsilon)\n                  if sizeof(sphere_points’) >= min_points\n                        sphere_points = sphere_points joined with sphere_points’\n                  if P’ is not yet member of any cluster\n                        add P’ to cluster C\n\nregionQuery(P, epsilon):\n      return all points within the n-dimensional sphere centered at P with radius epsilon (including P)\n*/\n\nclass Point {\n\tconstructor(v,idx) {\n\t\tthis.v = v;\n\t\tthis.idx = idx || 0;\n\t\tthis.k = 0;\n\t\tthis.visited = false;\n\t}\n}\n\nclass DBScan {\n\tconstructor(data,eps,min) {\n\t\tthis._multi = data[0].length>0;\n\t\tthis._data = this.initData(data);\n\t\tthis._eps = eps;\n\t\tthis._min = min;\n\t}\n\n\tinitData(data) {\n\t\tlet ret = [], len = data.length;\n\t\tlet multi = this._multi;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tret.push(new Point(multi? data[i] : [data[i]], i));\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tregionQuery(p) {\n\t\tlet\teps = this._eps, data = this._data,\n\t\t\t\tret = [], len = data.length;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet np = data[i];\n\t\t\tif(np!=p && np.visited) continue;\n\t\t\tif(eudist(np.v,p.v,true) <= eps)\n\t\t\t\tret.push(np);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\texpandCluster(p, region, k) {\n\t\tlet eps = this._eps, data = this._data, min = this._min;\n\n\t\t// Add p to cluster k\n\t\tp.k = k.id;\n\t\tk.data.push(p.v);\n\n\t\t// region.length is dynamic becouse items added\n\t\t// from newRegion to region\n\t\tfor(let j=0;j<region.length;j++) {\n\t\t\tlet np = region[j];\n\t\t\tif(!np.visited) {\n\t\t\t\tnp.visited = true;\n\t\t\t\tlet\n\t\t\t\t\tnewRegion = this.regionQuery(np),\n\t\t\t\t\trlen = newRegion.length;\n\t\t\t\tif(rlen >= min) {\n\t\t\t\t\tfor(let i=0;i<rlen;i++)\n\t\t\t\t\t\tregion.push(newRegion[i]);\n\t\t\t\t}\n\t\t\t\tif(!np.k) {\n\t\t\t\t\tnp.k = k.id;\n\t\t\t\t\tk.data.push(np.v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdbscan() {\n\t\tlet data = this._data, min = this._min,\n\t\t\t\tlen = data.length,\n\t\t\t\tkid = 0,\n\t\t\t\tks = [],\t\t// Clusters\n\t\t\t\tnoise = [],\t// Noise\n\t\t\t\tk = null;\t\t// Current cluster\n\n\t\tfor(let j=0;j<len;j++) {\n\t\t\tlet p = data[j];\n\t\t\tif(!p.visited) {\n\t\t\t\t// Mark as visited\n\t\t\t\tp.visited = true;\n\n\t\t\t\t// Get the reachable region for this point\n\t\t\t\tlet region = this.regionQuery(p);\n\n\t\t\t\t// Too small region\n\t\t\t\tif(region.length<min) {\n\t\t\t\t\tnoise.push(p);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tk = {id:kid++, data:[]};\n\t\t\t\t\tks.push(k);\n\t\t\t\t\tthis.expandCluster(p, region, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Restore unidimiensional data that was transformed to\n\t\t// multidimensional for the algoryth purposes\n\t\tif(!this._multi) {\n\t\t\tks.forEach(k=>{\n\t\t\t\tk.data = k.data.map(v=>v[0]);\n\t\t\t});\n\t\t\tnoise.forEach(p=>p.v=p.v[0]);\n\t\t}\n\n\t\treturn {\n\t\t\tnoise : noise.map(p=>p.v),\n\t\t\tclusters : ks\n\t\t}\n\t}\n}\n\nmodule.exports = function(data,eps,min) {\n\treturn (new DBScan(data,eps,min)).dbscan();\n}\n\n},{\"./distance.js\":2}]},{},[1]);\n"]}